{"name":"Easywebworker v0.2.1","tagline":"Easy Communication Protocol For Web Workers","body":"**Easywebworker v0.2.1**<br>\r\nEasy Communication Protocol For Web Workers<br>\r\n*Just execute worker functions from browser, and main functions from worker.*\r\n\r\n> Also work when web worker is not available. So support Web Worker on older Internet Explorers.\r\n\r\n# Features\r\n- Fallback support for old browsers. (AKA Internet Explorer Support.)\r\n- Execute functions directly. Nested functions are supported.\r\n- Execute global functions from worker.\r\n- Start Worker with startup data.\r\n- Alias for console.log for ease debugging.\r\n\r\n# Changelog\r\n- 0.2.1 - XDomainRequest Fallback Support added for crossdomain request on older internet explorers.\r\n\r\n# Prepare\r\n\r\n### On Browser\r\n\r\n```javascript\r\n// Just include script to page and create EasyWebWorker with context.\r\nvar worker = new EasyWebWorker(\"worker.js\", this);\r\n```\r\n\r\n### In Worker\r\n\r\n```javascript\r\n// Just import script.\r\nimportScripts(\"easy-web-worker.js\");\r\n```\r\n\r\n# Methods\r\nError Statement (On browser.):\r\n```javascript\r\nworker.onerror = function(event,filename,lineno,message){\r\n    // ...\r\n}\r\n```\r\n\r\nTerminate From Browser:\r\n```javascript\r\nworker.terminate();\r\n// or\r\nworker.close();\r\n```\r\n\r\nTerminate In Worker (Same as default.):\r\n```javascript\r\nself.close();\r\n```\r\n\r\n# Examples\r\n\r\n### Example 1 (Simple Usage)\r\nBrowser:\r\n```javascript\r\n// Execute function\r\nworker.execute(\"getSquares\", [2,3,5]);\r\n\r\n// And our callback function.\r\nfunction getSquaresCallback(event, squares) {\r\n    console.log(\"Here is our squares: \",squares)\r\n}\r\n```\r\n\r\nWorker:\r\n```javascript\r\nfunction getSquares(event, numberArray){\r\n    // Do stuff.\r\n    squares = [];\r\n    for(var i=0, len=numberArray.length; i<len; i++){\r\n        number = numberArray[i];\r\n        squares.push(number*number);\r\n    }\r\n\r\n    // Call our callback function.\r\n    self.execute(\"getSquaresCallback\", squares);\r\n}\r\n```\r\n\r\n\r\n### Example 2 (Nested Functions)\r\nBrowser:\r\n```javascript\r\n// Execute function.\r\nworker.execute(\"textOperations.reverseText\", \"Hello guys wazzup?\")\r\n\r\n// Our nested callback function.\r\nvar NestedFunctions = {\r\n  textPrinter: {\r\n      printToConsole: function(event, textToPrint) {\r\n          console.log(\"Here is our reversed text: \", textToPrint, this)\r\n\r\n          // Context test.\r\n          this.printToTitle(textToPrint)\r\n      },\r\n      printToTitle: function(text) {\r\n          window.document.title = text\r\n      }\r\n  }\r\n}\r\n```\r\nWorker:\r\n```javascript\r\n// Our nested function.\r\ntextOperations = {\r\n  reverseText: function(event, text) {\r\n    var reversedText = text.split(\"\").reverse().join(\"\");\r\n    return self.execute(\"NestedFunctions.textPrinter.printToConsole\", reversedText);\r\n  }\r\n};\r\n```\r\n\r\n### Example 3 (Startup Data)<br>\r\n(It uses worker file's querystring. So keep it as tiny as possible.)\r\nBrowser:\r\n```javascript\r\n// Create startup data.\r\nvar startupData = {name:\"Derp\", surname:\"Derpson\", age:\"23\"}\r\n\r\n// Create worker with startupData.\r\nvar workerTwo = new EasyWebWorker('demo-worker.js', this, startupData)\r\n\r\n// Execute worker.\r\nworkerTwo.execute(\"whatIsTheSettings\")\r\n\r\n// Get our startupData back.\r\ngetSettingsBack = function(event, startupData){\r\n    console.log(\"Here is our startup data: \", startupData)\r\n}\r\n```\r\n\r\nWorker:\r\n```javascript\r\nfunction whatIsTheSettings(){\r\n    // Give settings back.\r\n    self.execute(\"getSettingsBack\", self.startupData)\r\n}\r\n```\r\n\r\n### Example 4 (Call Global Function)<br>\r\nWorker:\r\n```javascript\r\nself.execute(\"window.console.log\", \"Hello world!\")\r\n\r\n// There is an alias for console log.\r\nself.log(\"Hello World!\")\r\n```\r\n","google":"UA-37814538-2","note":"Don't delete this file! It's used internally to help with page regeneration."}